#Spring DataSource drajver koji ?e se koristiti za komunikaciju aplikacije sa bazom
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.initialization-mode=always
spring.jpa.defer-datasource-initialization=true
##Navodi se baza koja se koristi
#Navodi se URL do baze koja je pokrenuta u lokalu na podrazumevanom portu 5432 i na serveru je kreirana ?ema baze pod nazivom "jpa"
#https://www.pgadmin.org/docs/pgadmin4/4.14/schema_dialog.html (ako koristimo Hibernate za kreiranje tabela, SQL deo sa linka nije potreban)
spring.datasource.url=jdbc:postgresql://localhost:5432/fishingAdventure
#Navode se kredencijali za konekciju na server baze
spring.datasource.username=postgres
spring.datasource.password=password
server.port=${PORT:8080}
#Umesto da sami pi?emo SQL skriptu za kreiranje tabela u bazi, Hibernate kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom dropuje ih (create-drop)
#https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
#Ako ?elimo sami da kreiramo skriptu za kreiranje tabela potrebno je u src/main/resources folderu kreirati i popuniti fajl pod nazivom schema.sql koji ?e Spring Boot automatski pokrenuti pri pokretanju aplikacije
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
#Hibernate SQL upiti se ispisuju na IDE konzoli
#formatira ispis SQL upita koje Hibernate pravi ka bazi na IDE konzoli
spring.jpa.properties.hibernate.format_sql=true
#https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc
#https://stackoverflow.com/questions/43905119/postgres-error-method-org-postgresql-jdbc-pgconnection-createclob-is-not-imple
#Hibernate optimizacija SQL upita za Postgres bazu
#https://vladmihalcea.com/the-open-session-in-view-anti-pattern/
spring.jpa.open-in-view=false
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=fishing.adventure.test@gmail.com
spring.mail.password=ISA.fa.1999
# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
#https://github.com/brettwooldridge/HikariCP
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimumIdle=5
#maximum pool size
spring.datasource.hikari.maximumPoolSize=20
#maximum idle time for connection
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
# maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.maxLifetime=2000000
#maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.connectionTimeout=30000
# Enable logging to verify that HikariCP is used, the second entry is specific to HikariCP
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 
